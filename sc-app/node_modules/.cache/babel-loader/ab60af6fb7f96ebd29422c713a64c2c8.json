{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0443\\u0447\\u0451\\u0431\\u0430\\\\4\\\\webSS\\\\sc-app\\\\src\\\\Components\\\\Tree123.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { useState } from 'react';\nimport TreeMenu from 'react-simple-tree-menu';\nimport 'react-simple-tree-menu/dist/main.css';\nimport axios from \"axios\"; // or as an object\n\n/*const treeData = {\r\n  'болячка1': {               // key\r\n    label: 'название болячки1',\r\n    index: 0, // decide the rendering order on the same level\r\n       // any other props you need, e.g. url\r\n    nodes: {\r\n      'симптом1 болячки1': {\r\n        label: 'симптом1',\r\n        index: 0,\r\n        nodes: { \r\n        },\r\n      },\r\n      'симптом2 болячки1': {\r\n        label: 'симптом2',\r\n        index: 0,\r\n        nodes: { \r\n        },\r\n      },\r\n    },\r\n  },\r\n  'болячка2 ': {\r\n    label: 'название болячки2',\r\n    index: 1,\r\n  },\r\n};*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Tree123(_ref) {\n  _s();\n\n  let {\n    goal_url\n  } = _ref;\n  const [treeData, settreeData] = React.useState(null);\n  axios({\n    // Endpoint to send files\n    url: \" http://localhost:5000/\" + goal_url,\n    method: \"GET\",\n    headers: {}\n  }).then(res => {\n    if (JSON.stringify(res.data) !== JSON.stringify(treeData)) settreeData(res.data);\n  }) // Handle the response from backend here\n  .catch(err => {\n    alert(\"все плохо\");\n  }); // Catch errors if any\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TreeMenu, {\n      data: treeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"treeViewMenu\", {\n      data: treeData,\n      onClickItem: _ref2 => {\n        let {\n          key,\n          label,\n          ...props\n        } = _ref2;\n        this.navigate(props.url); // user defined prop\n      },\n      debounceTime: 125,\n      children: _ref3 => {\n        let {\n          search,\n          items\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => search(e.target.value),\n            placeholder: \"Type and search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"listGroup\", {\n            children: items.map(props => /*#__PURE__*/_jsxDEV(\"listItem\", { ...props,\n              onChangeItem: () => {\n                alert(\"1\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Tree123, \"JZBfBgPKeU2hDJRGNfn+24HRhic=\");\n\n_c = Tree123;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree123\");","map":{"version":3,"names":["React","Component","useState","TreeMenu","axios","Tree123","goal_url","treeData","settreeData","url","method","headers","then","res","JSON","stringify","data","catch","err","alert","key","label","props","navigate","search","items","e","target","value","map"],"sources":["D:/учёба/4/webSS/sc-app/src/Components/Tree123.js"],"sourcesContent":["import React, { Component} from 'react';\r\nimport { useState } from 'react';\r\nimport TreeMenu from 'react-simple-tree-menu';\r\nimport 'react-simple-tree-menu/dist/main.css';\r\nimport axios from \"axios\" ;\r\n// or as an object\r\n/*const treeData = {\r\n  'болячка1': {               // key\r\n    label: 'название болячки1',\r\n    index: 0, // decide the rendering order on the same level\r\n       // any other props you need, e.g. url\r\n    nodes: {\r\n      'симптом1 болячки1': {\r\n        label: 'симптом1',\r\n        index: 0,\r\n        nodes: { \r\n        },\r\n      },\r\n      'симптом2 болячки1': {\r\n        label: 'симптом2',\r\n        index: 0,\r\n        nodes: { \r\n        },\r\n      },\r\n    },\r\n  },\r\n  'болячка2 ': {\r\n    label: 'название болячки2',\r\n    index: 1,\r\n  },\r\n};*/\r\n\r\nexport default function Tree123({goal_url})\r\n  {\r\n    const [treeData,settreeData] = React.useState(null);\r\n    axios({\r\n      // Endpoint to send files\r\n      url: \" http://localhost:5000/\" + goal_url ,\r\n      method: \"GET\" ,\r\n      headers: {},\r\n      })\r\n      .then((res) => { if (JSON.stringify(res.data) !== JSON.stringify(treeData)) settreeData (res.data)}) // Handle the response from backend here\r\n      . catch ((err) => { alert (\"все плохо\")}); // Catch errors if any\r\n    \r\n    return (\r\n      <div>\r\n      <TreeMenu data={treeData} />\r\n\r\n      <treeViewMenu\r\n        data={treeData}\r\n        onClickItem={({ key, label, ...props }) => {\r\n          this.navigate(props.url); // user defined prop\r\n        }}\r\n        debounceTime={125}>\r\n          {({ search, items }) => (\r\n              <>\r\n                <input onChange={e => search(e.target.value)} placeholder=\"Type and search\" />\r\n                <listGroup>\r\n                  {items.map(props => (\r\n                    <listItem {...props}  onChangeItem ={()=>{alert(\"1\")}} />\r\n                  ))}\r\n                </listGroup>\r\n              </>\r\n          )}\r\n      </treeViewMenu>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAO,sCAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,eAAe,SAASC,OAAT,OACb;EAAA;;EAAA,IAD8B;IAACC;EAAD,CAC9B;EACE,MAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBR,KAAK,CAACE,QAAN,CAAe,IAAf,CAA/B;EACAE,KAAK,CAAC;IACJ;IACAK,GAAG,EAAE,4BAA4BH,QAF7B;IAGJI,MAAM,EAAE,KAHJ;IAIJC,OAAO,EAAE;EAJL,CAAD,CAAL,CAMGC,IANH,CAMSC,GAAD,IAAS;IAAE,IAAIC,IAAI,CAACC,SAAL,CAAeF,GAAG,CAACG,IAAnB,MAA6BF,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAjC,EAA2DC,WAAW,CAAEK,GAAG,CAACG,IAAN,CAAX;EAAuB,CANrG,EAMuG;EANvG,CAOIC,KAPJ,CAOYC,GAAD,IAAS;IAAEC,KAAK,CAAE,WAAF,CAAL;EAAoB,CAP1C,EAFF,CAS+C;;EAE7C,oBACE;IAAA,wBACA,QAAC,QAAD;MAAU,IAAI,EAAEZ;IAAhB;MAAA;MAAA;MAAA;IAAA,QADA,eAGA;MACE,IAAI,EAAEA,QADR;MAEE,WAAW,EAAE,SAA8B;QAAA,IAA7B;UAAEa,GAAF;UAAOC,KAAP;UAAc,GAAGC;QAAjB,CAA6B;QACzC,KAAKC,QAAL,CAAcD,KAAK,CAACb,GAApB,EADyC,CACf;MAC3B,CAJH;MAKE,YAAY,EAAE,GALhB;MAAA,UAMK;QAAA,IAAC;UAAEe,MAAF;UAAUC;QAAV,CAAD;QAAA,oBACG;UAAA,wBACE;YAAO,QAAQ,EAAEC,CAAC,IAAIF,MAAM,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAA5B;YAA8C,WAAW,EAAC;UAA1D;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAA,UACGH,KAAK,CAACI,GAAN,CAAUP,KAAK,iBACd,yBAAcA,KAAd;cAAsB,YAAY,EAAG,MAAI;gBAACH,KAAK,CAAC,GAAD,CAAL;cAAW;YAArD;cAAA;cAAA;cAAA;YAAA,QADD;UADH;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA,gBADH;MAAA;IANL;MAAA;MAAA;MAAA;IAAA,QAHA;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD;;GApCqBd,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}